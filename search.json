[{"path":[]},{"path":"https://docs.ropensci.org/circle/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"CONTRIBUTING","text":"Small typos grammatical errors documentation may edited directly using GitHub web interface, long changes made source file. YES: edit roxygen comment .R file R/. : edit .Rd file man/.","code":""},{"path":"https://docs.ropensci.org/circle/CONTRIBUTING.html","id":"prerequisites","dir":"","previous_headings":"","what":"Prerequisites","title":"CONTRIBUTING","text":"make substantial pull request, always file issue make sure someone team agrees ’s problem. ’ve found bug, create associated issue illustrate bug minimal reprex.","code":""},{"path":"https://docs.ropensci.org/circle/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"","what":"Pull request process","title":"CONTRIBUTING","text":"recommend create Git branch pull request (PR). Look Travis AppVeyor build status making changes. README contain badges continuous integration services used package. recommend tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2. use testthat. Contributions test cases included easier accept. user-facing changes, add bullet top NEWS.md current development version header describing changes made followed GitHub username, links relevant issue(s)/PR(s).","code":""},{"path":"https://docs.ropensci.org/circle/CONTRIBUTING.html","id":"testing-the-package","dir":"","previous_headings":"","what":"Testing the package","title":"CONTRIBUTING","text":"test package locally, following conditions need met: Circle CI API Token stored env var named R_CIRCLE active repository Circle CI access rights Alternatively changes can pushed GitHub tested CI runner. CI runner operates ropensci/circle repo access respective secrets run.","code":""},{"path":"https://docs.ropensci.org/circle/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"CONTRIBUTING","text":"Please note circle project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://docs.ropensci.org/circle/CONTRIBUTING.html","id":"see-ropensci-contributing-guide","dir":"","previous_headings":"","what":"See rOpenSci contributing guide","title":"CONTRIBUTING","text":"details.","code":""},{"path":"https://docs.ropensci.org/circle/CONTRIBUTING.html","id":"discussion-forum","dir":"","previous_headings":"","what":"Discussion forum","title":"CONTRIBUTING","text":"Check discussion forum question, use case, otherwise bug feature request software . think issue requires longer form discussion.","code":""},{"path":"https://docs.ropensci.org/circle/CONTRIBUTING.html","id":"prefer-to-email","dir":"","previous_headings":"","what":"Prefer to Email?","title":"CONTRIBUTING","text":"Email person listed maintainer DESCRIPTION file repo. Though note private discussions email don’t help others - course email totally warranted ’s sensitive problem kind.","code":""},{"path":"https://docs.ropensci.org/circle/CONTRIBUTING.html","id":"thanks-for-contributing","dir":"","previous_headings":"","what":"Thanks for contributing!","title":"CONTRIBUTING","text":"contributing guide adapted tidyverse contributing guide available https://raw.githubusercontent.com/r-lib/usethis/master/inst/templates/tidy-contributing.md","code":""},{"path":"https://docs.ropensci.org/circle/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://docs.ropensci.org/circle/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/circle/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://docs.ropensci.org/circle/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://docs.ropensci.org/circle/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://docs.ropensci.org/circle/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://docs.ropensci.org/circle/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://docs.ropensci.org/circle/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://docs.ropensci.org/circle/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://docs.ropensci.org/circle/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://docs.ropensci.org/circle/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://docs.ropensci.org/circle/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://docs.ropensci.org/circle/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://docs.ropensci.org/circle/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://docs.ropensci.org/circle/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://docs.ropensci.org/circle/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://docs.ropensci.org/circle/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://docs.ropensci.org/circle/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://docs.ropensci.org/circle/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://docs.ropensci.org/circle/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://docs.ropensci.org/circle/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) 2019 Patrick Schratz  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. circleci Copyright (C) 2019 Patrick Schratz This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://docs.ropensci.org/circle/articles/circle.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting Started","text":"able run builds repository, needs enabled Circle CI first. package heavily relies GitHub automatic user information extraction providers GitLab Bitbucket supported. general Circle CI builds can run Git hosting provider.","code":""},{"path":"https://docs.ropensci.org/circle/articles/circle.html","id":"authentication-with-github","dir":"Articles","previous_headings":"","what":"Authentication with GitHub","title":"Getting Started","text":"get started Circle CI GitHub, make sure install Circle CI GitHub App configure “Free” plan account. first time {circle} function called, check existence Circle API key. API key needed securely talk Circle CI API make requests behalf user. two ways API key can set: (recommended) Via environment variable R_CIRCLE ~/.Renviron (e.g. R_CIRCLE = <API KEY>) ~/.circleci/cli.yml via following pattern create API key R console, browse_circle_token() can used. {circle} scrapes information current repository making API calls GitHub. able , GitHub_TOKEN needed (similar API requests Circle CI). good practice token set many purposes using R GitHub. Invoking usethis::browse_GitHub_token() easy way create one none exists yet.","code":"host: https://circleci.com endpoint: graphql-unstable token: <token>"},{"path":"https://docs.ropensci.org/circle/articles/circle.html","id":"first-steps","dir":"Articles","previous_headings":"","what":"First steps","title":"Getting Started","text":"querying information user enabling project one can check everything set correctly. get_circle_user() makes uses Circle CI API key. enable_repo() also uses GitHub token. repo enabled, returned circle::list_projects().","code":"circle::get_circle_user()  $content $content$name [1] \"Patrick Schratz\"  $content$login [1] \"pat-s\"  $content$id [1] \"9c373331-d0f7-45e1-afe6-4a5c75e00d10\"   $path [1] \"/me\"  $response Response [https://circleci.com/api/v2/me?circle-token=39d697f345d8d8a92ab07c333405d9b0092d116c]   Date: 2021-01-07 20:07   Status: 200   Content-Type: application/json;charset=utf-8   Size: 86 B   attr(,\"class\") [1] \"circle_user\" circe::enable_repo() ✔ Successfully enabled repo 'ropensci/circle' on Circle CI."},{"path":"https://docs.ropensci.org/circle/articles/circle.html","id":"deployment","dir":"Articles","previous_headings":"","what":"Deployment","title":"Getting Started","text":"Deployments refers practice push (modified) files build repository. Configuring build deployments can bit tedious respect permissions. circle::use_circle_deploy() helps creates SSH key pair enable deployment. private key stored GitHub (“Settings -> SSH GPG keys”) public key Circle CI (respective project page “SSH Keys”). double-check, now “user-key” Circle CI repo settings menu point “SSH keys”. matter multiple “deploy key” “user-key”s exists. important point one “user key” set “preferred”.  alternative circle::use_circle_deploy() one also click “Add user key” button appear user key set yet.","code":"circle::use_circle_deploy() ✖ No 'user-key' found. ────────────────────────────────────────────────────────────────────────────────────────────────── ✔ Added a 'user key' to project '<repo-slug>' on Circle CI. This enables deployment from builds."},{"path":"https://docs.ropensci.org/circle/articles/circle.html","id":"deployment-keys","dir":"Articles","previous_headings":"Deployment","what":"Deployment Keys","title":"Getting Started","text":"respect SSH keys, two different types keys Circle CI: Deploy key User key “Deploy keys” used checkout repository build starting. kind keys “read” permissions allow “write” repository. connected Circle CI GitHub already, “deploy key” stored every repository able checkout code. name “deploy” key bit misleading since used deploying builds. enable deployment repository however, “user-key” needed. key type also “write” permissions can added using use_circle_deploy(). use_circle_deploy() add called “user key” settings repo Circle CI. private key added GitHub profile “SSH GPG keys” section title pointing respective repo. See also Circle CI section deployment. (reasons want use use_circle_deploy() go manual way adding SSH key Circle CI, please aware issue.)","code":""},{"path":"https://docs.ropensci.org/circle/articles/circle.html","id":"starting-a-build","dir":"Articles","previous_headings":"","what":"Starting a Build","title":"Getting Started","text":"almost every CI provider, YAML configuration files required specify tasks executed build. Currently Circle CI come official support R language can add vote . Since Circle CI heavily based docker really problem. One can simply use rocker R images first-class support respect R containers. Official support R mean images cached Circle CIs side directly available build start. Currently, rocker images need downloaded every build . {circle} come template running R builds focuses API build metadata functionality. Instead, look ropensci/tic functions tic::use_tic() tic::use_circle_yml() quickly get R builds running Circle CI. Alternatively can borrow config used repo - also created via {tic}.","code":""},{"path":"https://docs.ropensci.org/circle/articles/tic.html","id":"enabling-the-repository-on-circle-ci","dir":"Articles","previous_headings":"","what":"Enabling the repository on Circle CI","title":"Using {circle} with {tic}","text":"first step enable/register repository Circle CI. , enable_repo() can called. Assuming already account Circle CI (authenticating GitHub recommended), “follows” repository Circle CI builds can triggered pushes repository.","code":""},{"path":"https://docs.ropensci.org/circle/articles/tic.html","id":"creating-the-circle-ci-yaml-configuration-file","dir":"Articles","previous_headings":"","what":"Creating the Circle CI YAML configuration file","title":"Using {circle} with {tic}","text":"Next, YAML file (.circleci/config.yml) needs created lists tasks executed Circle CI commit repository. ropensci/tic package comes play provides YAML templates Circle CI. two ways get template via {tic}: going chatty tic::use_tic() wizard asks questions related configuration writes/initiates multiple CI providers (based choices made). good choice want understand greater detail {tic} . calling tic::use_circle_yml() (default) writes Circle CI configuration file checks R package via {rcmdcheck} deploys {pkgdown} site gh-pages branch repository. addition files added .Rbuildignore .gitignore. Also CI-agnostic tic.R file created lists steps/macros executed domain-specific language syntax. Please look introduction vignette tic package understand role tic.R detail.","code":""},{"path":"https://docs.ropensci.org/circle/articles/tic.html","id":"enabling-deployment-from-builds","dir":"Articles","previous_headings":"","what":"Enabling deployment from builds","title":"Using {circle} with {tic}","text":"able push GitHub repository setup work required. Deployment often done creating SSH key pair one part stored Circle CI one GitHub. prevent add SSH key parts Circle CI GitHub manually, use_circle_deploy() can called programmatically. See section “Deployment” “Getting Started” vignette details process.","code":""},{"path":"https://docs.ropensci.org/circle/articles/tic.html","id":"understanding-the-yaml-file","dir":"Articles","previous_headings":"","what":"Understanding the YAML file","title":"Using {circle} with {tic}","text":"config file repo .circleci/config.yml also set {tic}. Let’s walk step step understand happening: part specify use rocker/verse docker image base job. first step “checkout” means repository cloned. Next, action related caching R packages initiated. saves time future R packages package needs installed given day, re-used future builds day without installed . Next, {tic} package installed certain tic steps run. take care installing dependencies R package checked prepare environment subsequent steps. step checks package CRAN eligibility making use rcmdcheck::rcmdcheck() inside tic::script() call. Finally, R package initiated earlier saved. deploy: step following next parts executing steps just shown. end however, tic::deploy() called internally build {pkgdown} site package deploy site gh-pages branch repository.","code":"jobs:   r-release:     # r-release-env     environment:     docker:       - image: rocker/verse     steps:       - checkout # create a unique env var for the cache. Unfortunately normal env vars       # are not picked up by the cache, therefore this workaround is needed.       # See https://discuss.circleci.com/t/cannot-use-circle-yml-environment-variables-in-cache-keys/10994/7       - run: echo \"$(date '+%d-%m')-r-release\" > /tmp/_tmp_file       - restore_cache:           key: R-package-library-{{ checksum \"/tmp/_tmp_file\" }} # install deps and check pkg ---------------------------------------------       - run:           name: \"[r-release] Install dependencies\"           command: |             sudo apt update && sudo apt install -y ccache libgit2-dev libharfbuzz-dev libfribidi-dev             echo -e 'options(Ncpus = 4, repos = structure(c(CRAN = \"https://cloud.r-project.org/\")))' > $HOME/.Rprofile             R -q -e 'install.packages(\"remotes\")'             R -q -e 'if (getRversion() < \"3.2\" && !requireNamespace(\"curl\")) install.packages(\"curl\")'             R -q -e 'remotes::install_github(\"ropensci/tic\", upgrade = \"always\"); print(tic::dsl_load()); tic::prepare_all_stages()'             R -q -e 'tic::before_install()'             R -q -e 'tic::install()' - run:           name: \"[r-release] R CMD Check\"           no_output_timeout: 60m           command: |             R -q -e 'tic::before_script()'             R -q -e 'tic::script()' # save R pkg cache -------------------------------------------------------       - save_cache:           key: R-package-library-{{ checksum \"/tmp/_tmp_file\" }}           paths:             - /usr/local/lib/R/site-library"},{"path":"https://docs.ropensci.org/circle/articles/tic.html","id":"the-first-build","dir":"Articles","previous_headings":"","what":"The first build","title":"Using {circle} with {tic}","text":".circleci/config.yml tic.R commited pushed, first build start Circle CI. Calling one get_pipelines(), get_workflows() get_jobs() now return content. addition, can directly browse builds Circle CI web interface calling usethis::browse_circleci().","code":""},{"path":"https://docs.ropensci.org/circle/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Patrick Schratz. Author, maintainer. Max Joseph. Reviewer.            Max reviewed package ropensci, see <https://github.com/ropensci/software-review/issues/356> Sharla Gelfand. Reviewer.            Sharla reviewed package ropensci, see <https://github.com/ropensci/software-review/issues/356>","code":""},{"path":"https://docs.ropensci.org/circle/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Schratz P (2024). circle: R Client Package Circle CI. R package version 0.7.2, https://github.com/ropensci/circle, https://docs.ropensci.org/circle/.","code":"@Manual{,   title = {circle: R Client Package for Circle CI},   author = {Patrick Schratz},   year = {2024},   note = {R package version 0.7.2, https://github.com/ropensci/circle},   url = {https://docs.ropensci.org/circle/}, }"},{"path":"https://docs.ropensci.org/circle/index.html","id":"circle","dir":"","previous_headings":"","what":"R Client Package for Circle CI","title":"R Client Package for Circle CI","text":"R client package Continuous Integration (CI) provider ‘Circle CI’. Circle CI stands line GitHub Actions, Travis CI, AppVeyor many CI providers. Circle CI heavily relies Docker containers runner execution. Continuous Integration (CI) / Continuous Deployment (CD) heavily used world automatically perform certain actions specific trigger (e.g. commit). developing R packages common uses cases check package commit CRAN eligibility (running R CMD Check) deploy {pkgdown} documentation page package. package aims help set CI/CD service provider Circle CI provides R functions execute CI specific tasks build restarts, log queries setting environment variables within R. also simplifies setup process build deployments via use_circle_deploy(). functionality relies calls Circle CI REST API. two ways use package: get_pipelines() get_checkout_keys() set_env_var() etc. Via direct API calls workhorse function circle(). {circle} come option setup Circle CI YAML files. Please see related {tic} package functionality CI workflow related tools. {circle} aims provide handy flexible high-level interface Circle CI API without shipping opinionated workflow functionality.","code":""},{"path":"https://docs.ropensci.org/circle/index.html","id":"api-versions","dir":"","previous_headings":"","what":"API versions","title":"R Client Package for Circle CI","text":"functionality uses Circle CI API v2 follows pipelines -> workflows -> jobs approach. API version still beta might undergo changes near future. functions/endpoints can also used via API versions v1.1 v1 setting api_version argument. However, work respective API endpoint available chosen API version. Usually, need practice fall back API version < 2. information differences Circle CI API versions, look document explaining changes v1.1 v2.","code":""},{"path":"https://docs.ropensci.org/circle/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"R Client Package for Circle CI","text":"Development Version:","code":"remotes::install_github(\"ropensci/circle\")"},{"path":"https://docs.ropensci.org/circle/index.html","id":"get-started","dir":"","previous_headings":"","what":"Get Started","title":"R Client Package for Circle CI","text":"See Getting Started vignette introduction.","code":""},{"path":"https://docs.ropensci.org/circle/index.html","id":"note-to-developers","dir":"","previous_headings":"","what":"Note to Developers","title":"R Client Package for Circle CI","text":"packages relies private API keys local testing. See CONTRIBUTING.md#testing--package detailed instructions.","code":""},{"path":"https://docs.ropensci.org/circle/index.html","id":"acknowledgments","dir":"","previous_headings":"","what":"Acknowledgments","title":"R Client Package for Circle CI","text":"package inspired work Thomas J. Leeper (discontinued) cloudyr/circleci package (archived) ropenscilabs/travis package.","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":"https://docs.ropensci.org/circle/reference/browse_circle_token.html","id":null,"dir":"Reference","previous_headings":"","what":"Authenticate to Circle CI — browse_circle_token","title":"Authenticate to Circle CI — browse_circle_token","text":"Circle CI API token needed interact Circle CI API. browse_circle_token() opens browser window respective Circle CI endpoint retrieve key.","code":""},{"path":"https://docs.ropensci.org/circle/reference/browse_circle_token.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Authenticate to Circle CI — browse_circle_token","text":"","code":"browse_circle_token()"},{"path":"https://docs.ropensci.org/circle/reference/browse_circle_token.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Authenticate to Circle CI — browse_circle_token","text":"Returns TRUE (invisibly).","code":""},{"path":"https://docs.ropensci.org/circle/reference/browse_circle_token.html","id":"store-api-token","dir":"Reference","previous_headings":"","what":"Store API token","title":"Authenticate to Circle CI — browse_circle_token","text":"circle supports two ways storing Circle API tokens: via env vars R_CIRCLE via ~/.circleci/cli.yml latter already present already used circle CLI tool point past. , preference approach use. following instructions help set ~/.circleci/cli.yml correctly: Copy token browser called browse_circle_token(). can use edit_circle_config() open ~/.circleci/cli.yml. token stored using following structure","code":"host: https://circleci.com endpoint: graphql-unstable token: <token>"},{"path":"https://docs.ropensci.org/circle/reference/browse_circle_token.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Authenticate to Circle CI — browse_circle_token","text":"","code":"if (FALSE) { browse_circle_token()  edit_circle_config() }"},{"path":"https://docs.ropensci.org/circle/reference/builds.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Metadata from Circle CI Builds — builds","title":"Retrieve Metadata from Circle CI Builds — builds","text":"Query information pipelines, workflows jobs Circle CI. S3 print() method functions returns respective pipeline IDs. inspect details pipeline, save return value object inspect respective sub-lists. pipeline workflow supplied get_workflows()/get_jobs(), ten recent pipelines/jobs queried, respectively.","code":""},{"path":"https://docs.ropensci.org/circle/reference/builds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Metadata from Circle CI Builds — builds","text":"","code":"get_pipelines(   repo = github_info()$name,   user = github_info()$owner$login,   limit = 30,   vcs_type = \"gh\",   api_version = \"v2\" )  get_workflows(   pipeline_id = NULL,   repo = github_info()$name,   user = github_info()$owner$login )  get_jobs(   workflow_id = NULL,   repo = github_info()$name,   user = github_info()$owner$login,   vcs_type = \"gh\" )  retry_workflow(workflow_id = NULL)"},{"path":"https://docs.ropensci.org/circle/reference/builds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Metadata from Circle CI Builds — builds","text":"repo [character] repository slug use. Must follow \"user/repo\" structure. user [character] username repository. default queried using get_user(). limit [integer] many builds returned? Maximum allowed Circle 30. vcs_type [character] version control system use. Defaults \"gh\" (Github). api_version [character] character string specifying Circle CI API version. usually need changed user. pipeline_id [character] Circle CI pipeline ID. workflow_id [character] Circle CI workflow ID.","code":""},{"path":"https://docs.ropensci.org/circle/reference/builds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Metadata from Circle CI Builds — builds","text":"object class circle_collection containing list information queried Circle CI pipelines/workflows/jobs.","code":""},{"path":"https://docs.ropensci.org/circle/reference/builds.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve Metadata from Circle CI Builds — builds","text":"get_*() functions query information respective build level details (pipeline - workflow - job), retry_workflow() users rerun specific workflow. default, workflow recent pipeline rerun pipeline ID supplied.","code":""},{"path":"https://docs.ropensci.org/circle/reference/builds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Metadata from Circle CI Builds — builds","text":"","code":"if (FALSE) { pipelines <- get_pipelines()  workflows <- get_workflows()  jobs <- get_jobs()  # rerun most recent workflow retry_workflow() }"},{"path":"https://docs.ropensci.org/circle/reference/checkout_key.html","id":null,"dir":"Reference","previous_headings":"","what":"Interact with ","title":"Interact with ","text":"Create, delete, query check different types checkout keys specific Circle CI project. Valid values argument type \"user-key\" \"deploy-key\". \"Checkout Key\" Circle CI specific SSH key used checkout repositories Circle CI build possible deploy changes repository. Circle CI subdivides \"Checkout Keys\" \"user-key\" \"deploy-key\". Please see \"Deployment\" section \"Getting Started\" vignette information.","code":""},{"path":"https://docs.ropensci.org/circle/reference/checkout_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interact with ","text":"","code":"create_checkout_key(   repo = github_info()$name,   user = github_info()$owner$login,   type = \"user-key\",   api_version = \"v2\",   vcs_type = \"gh\",   quiet = FALSE )  get_checkout_keys(   repo = github_info()$name,   user = github_info()$owner$login,   vcs_type = \"gh\",   api_version = \"v2\" )  delete_checkout_key(   fingerprint = NULL,   repo = github_info()$name,   user = github_info()$owner$login,   type = \"user-key\",   api_version = \"v2\",   vcs_type = \"gh\" )  has_checkout_key(   repo = github_info()$name,   user = github_info()$owner$login,   type = \"github-user-key\",   vcs_type = \"gh\",   preferred = TRUE )"},{"path":"https://docs.ropensci.org/circle/reference/checkout_key.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interact with ","text":"repo [character] repository slug use. Must follow \"user/repo\" structure. user [character] username repository. default queried using get_user(). type [character] Type key add. Options \"user-key\" \"deploy-key\". api_version [character] character string specifying Circle CI API version. usually need changed user. vcs_type [character] version control system use. Defaults \"gh\" (Github). quiet [logical] TRUE, console output suppressed. fingerprint [character] fingerprint checkout key deleted. preferred [logical] Checks whether requested type \"preferred\" key.","code":""},{"path":"https://docs.ropensci.org/circle/reference/checkout_key.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interact with ","text":"object class circle_api following elements content (queried content) path (API request) response (HTTP response information)","code":""},{"path":"https://docs.ropensci.org/circle/reference/checkout_key.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interact with ","text":"","code":"if (FALSE) { # by default a \"user-key\" will be created which can also be used for build # deployments create_checkout_key()  # A \"deploy-key\" can only be used to checkout code from the repository into # a Circle CI build create_checkout_key(type = \"deploy-key\") } if (FALSE) { get_checkout_keys() } if (FALSE) { delete_checkout_key() } if (FALSE) { has_checkout_key() }"},{"path":"https://docs.ropensci.org/circle/reference/circle-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Circle CI API Client — circle-package","title":"Circle CI API Client — circle-package","text":"package provides functionality interacting Circle CI API. Circle CI continuous integration provider allows automated testing software time software publicly committed repository GitHub. package interacts Circle CI REST API allows execute tasks R without visiting website. includes monitoring builds, modifying build environment settings environment variables, cancelling restarting builds. Use package requires Circle API key. Unless key already set, users guided creation key, API keys disposable, still treated securely. following functions simplify integrating R package testing deployment GitHub Circle CI: enable_repo() enables Circle CI repository, use_circle_deploy() installs public deploy key GitHub corresponding private key Circle CI simplify deployments GitHub Circle CI.","code":""},{"path":"https://docs.ropensci.org/circle/reference/circle-package.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Circle CI API Client — circle-package","text":"","code":"if (FALSE) { # check to see if you've authenticated correctly get_circle_user() }"},{"path":"https://docs.ropensci.org/circle/reference/circle.html","id":null,"dir":"Reference","previous_headings":"","what":"Circle CI HTTP Requests — circle","title":"Circle CI HTTP Requests — circle","text":"Workhorse function executing API requests Circle CI.","code":""},{"path":"https://docs.ropensci.org/circle/reference/circle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Circle CI HTTP Requests — circle","text":"","code":"circle(   verb = \"GET\",   path = \"\",   query = list(),   body = \"\",   api_version = \"v2\",   encode = \"json\" )"},{"path":"https://docs.ropensci.org/circle/reference/circle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Circle CI HTTP Requests — circle","text":"verb [character] character string containing HTTP verb, defaulting GET. path [character] character string API endpoint (begin slash). query [character] list specifying query string arguments pass API. used pass API token. body [character] named list array passed request. Corresponds \"-d\" argument curl command. api_version [character] character string specifying Circle CI API version. usually need changed user. encode [character] Encoding format. See httr::POST.","code":""},{"path":"https://docs.ropensci.org/circle/reference/circle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Circle CI HTTP Requests — circle","text":"object class circle_api following elements content (queried content) path (API request) response (HTTP response information)","code":""},{"path":"https://docs.ropensci.org/circle/reference/circle.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Circle CI HTTP Requests — circle","text":"almost cases, users need execute API calls directly. However, desired functions makes possible issue API request. experience calling custom request heavily, consider opening feature request GitHub.","code":""},{"path":"https://docs.ropensci.org/circle/reference/circle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Circle CI HTTP Requests — circle","text":"","code":"if (FALSE) { circle(verb = \"GET\", path = \"/project/gh/ropensci/circle/checkout-key\") }"},{"path":"https://docs.ropensci.org/circle/reference/edit_circle_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Open circle Configuration file — edit_circle_config","title":"Open circle Configuration file — edit_circle_config","text":"Opens ~/.circleci/cli.yml.","code":""},{"path":"https://docs.ropensci.org/circle/reference/edit_circle_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open circle Configuration file — edit_circle_config","text":"","code":"edit_circle_config()"},{"path":"https://docs.ropensci.org/circle/reference/edit_circle_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Open circle Configuration file — edit_circle_config","text":"return value, called side effects.","code":""},{"path":"https://docs.ropensci.org/circle/reference/enable_repo.html","id":null,"dir":"Reference","previous_headings":"","what":"Enable a repo on Circle CI — enable_repo","title":"Enable a repo on Circle CI — enable_repo","text":"\"Follows\" repo Circle CI builds can triggered.","code":""},{"path":"https://docs.ropensci.org/circle/reference/enable_repo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Enable a repo on Circle CI — enable_repo","text":"","code":"enable_repo(   repo = github_info()$name,   user = github_info()$owner$login,   vcs_type = \"gh\",   api_version = \"v1.1\",   quiet = FALSE )"},{"path":"https://docs.ropensci.org/circle/reference/enable_repo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Enable a repo on Circle CI — enable_repo","text":"repo [character] repository slug use. Must follow \"user/repo\" structure. user [character] username repository. default queried using get_user(). vcs_type [character] version control system use. Defaults \"gh\" (Github). api_version [character] character string specifying Circle CI API version. usually need changed user. quiet [logical] TRUE, console output suppressed.","code":""},{"path":"https://docs.ropensci.org/circle/reference/enable_repo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Enable a repo on Circle CI — enable_repo","text":"object class circle_api following elements content (queried content) path (API request) response (HTTP response information)","code":""},{"path":"https://docs.ropensci.org/circle/reference/enable_repo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Enable a repo on Circle CI — enable_repo","text":"","code":"if (FALSE) { enable_repo() }"},{"path":"https://docs.ropensci.org/circle/reference/env_var.html","id":null,"dir":"Reference","previous_headings":"","what":"Interact with Environment Variable(s) on Circle CI — env_var","title":"Interact with Environment Variable(s) on Circle CI — env_var","text":"Add, get set Circle CI environment variable(s) repo Circle CI.","code":""},{"path":"https://docs.ropensci.org/circle/reference/env_var.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interact with Environment Variable(s) on Circle CI — env_var","text":"","code":"get_env_vars(   name = NULL,   repo = github_info()$name,   user = github_info()$owner$login,   vcs_type = \"gh\",   api_version = \"v2\" )  set_env_var(   var,   repo = github_info()$name,   user = github_info()$owner$login,   vcs_type = \"gh\",   api_version = \"v2\",   quiet = FALSE )  delete_env_var(   var,   repo = github_info()$name,   user = github_info()$owner$login,   vcs_type = \"gh\",   api_version = \"v2\",   quiet = FALSE )"},{"path":"https://docs.ropensci.org/circle/reference/env_var.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interact with Environment Variable(s) on Circle CI — env_var","text":"name [character] Name specific environment variable. set, env vars returned. repo [character] repository slug use. Must follow \"user/repo\" structure. user [character] username repository. default queried using get_user(). vcs_type [character] version control system use. Defaults \"gh\" (Github). api_version [character] character string specifying Circle CI API version. usually need changed user. var [list] list containing key-value pairs environment variable value. quiet [logical] TRUE, console output suppressed.","code":""},{"path":"https://docs.ropensci.org/circle/reference/env_var.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interact with Environment Variable(s) on Circle CI — env_var","text":"object class circle_api following elements content (queried content) path (API request) response (HTTP response information)","code":""},{"path":"https://docs.ropensci.org/circle/reference/env_var.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interact with Environment Variable(s) on Circle CI — env_var","text":"","code":"if (FALSE) { # get env var get_env_vars()  # set env var set_env_var(var = list(\"foo\" = \"123\"))  # delete env var delete_env_var(\"foo\") }"},{"path":"https://docs.ropensci.org/circle/reference/get_build_artifacts.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Build Artifacts of a Specific Job — get_build_artifacts","title":"Get Build Artifacts of a Specific Job — get_build_artifacts","text":"Retrieve artifacts specific build.","code":""},{"path":"https://docs.ropensci.org/circle/reference/get_build_artifacts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Build Artifacts of a Specific Job — get_build_artifacts","text":"","code":"get_build_artifacts(   job_id = NULL,   repo = github_info()$name,   user = github_info()$owner$login,   vcs_type = \"gh\",   api_version = \"v2\" )"},{"path":"https://docs.ropensci.org/circle/reference/get_build_artifacts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Build Artifacts of a Specific Job — get_build_artifacts","text":"job_id [character] Circle CI job id. repo [character] repository slug use. Must follow \"user/repo\" structure. user [character] username repository. default queried using get_user(). vcs_type [character] version control system use. Defaults \"gh\" (Github). api_version [character] character string specifying Circle CI API version. usually need changed user.","code":""},{"path":"https://docs.ropensci.org/circle/reference/get_build_artifacts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Build Artifacts of a Specific Job — get_build_artifacts","text":"object class circle_api following elements content (queried content) path (API request) response (HTTP response information)","code":""},{"path":"https://docs.ropensci.org/circle/reference/get_build_artifacts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Build Artifacts of a Specific Job — get_build_artifacts","text":"","code":"if (FALSE) { job_id <- get_jobs()[[1]]$id get_build_artifacts(job_id) }"},{"path":"https://docs.ropensci.org/circle/reference/get_circle_user.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Circle CI user — get_circle_user","title":"Get Circle CI user — get_circle_user","text":"Retrieve details authenticated Circle CI user.","code":""},{"path":"https://docs.ropensci.org/circle/reference/get_circle_user.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Circle CI user — get_circle_user","text":"","code":"get_circle_user()"},{"path":"https://docs.ropensci.org/circle/reference/get_circle_user.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Circle CI user — get_circle_user","text":"named vector class circle_user containing information authenticated user: Full name Username ID API endpoint","code":""},{"path":"https://docs.ropensci.org/circle/reference/get_circle_user.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Circle CI user — get_circle_user","text":"","code":"if (FALSE) { get_circle_user() }"},{"path":"https://docs.ropensci.org/circle/reference/github_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Github information — github_info","title":"Github information — github_info","text":"Retrieves metadata Git repository GitHub. github_info() returns list obtained GET \"/repos/:repo\" API.","code":""},{"path":"https://docs.ropensci.org/circle/reference/github_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Github information — github_info","text":"","code":"github_info(path = \".\", remote = \"origin\", .token = NULL)"},{"path":"https://docs.ropensci.org/circle/reference/github_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Github information — github_info","text":"path [string] path GitHub-enabled Git repository (subdirectory thereof). remote [character] Github remote used. .token [character] Authentication token. Defaults GITHUB_PAT GITHUB_TOKEN environment variables, order set. See gh_token() need flexibility, e.g. different tokens different GitHub Enterprise deployments.","code":""},{"path":"https://docs.ropensci.org/circle/reference/github_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Github information — github_info","text":"Object class gh_response (list type) information queried repository.","code":""},{"path":"https://docs.ropensci.org/circle/reference/list_projects.html","id":null,"dir":"Reference","previous_headings":"","what":"List Circle CI Projects — list_projects","title":"List Circle CI Projects — list_projects","text":"Retrieve list Circle CI repositories authenticated user.","code":""},{"path":"https://docs.ropensci.org/circle/reference/list_projects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List Circle CI Projects — list_projects","text":"","code":"list_projects(repo = github_info()$name, user = github_info()$owner$login)"},{"path":"https://docs.ropensci.org/circle/reference/list_projects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List Circle CI Projects — list_projects","text":"repo [character] repository slug use. Must follow \"user/repo\" structure. user [character] username repository. default queried using get_user().","code":""},{"path":"https://docs.ropensci.org/circle/reference/list_projects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List Circle CI Projects — list_projects","text":"object class circle_api following elements content (queried content) path (API request) response (HTTP response information)","code":""},{"path":"https://docs.ropensci.org/circle/reference/list_projects.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List Circle CI Projects — list_projects","text":"Retrieves detailed list repository repo-related information Circle CI repository attached current user. endpoint uses API v1.1 probably removed near future.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/circle/reference/list_projects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List Circle CI Projects — list_projects","text":"","code":"if (FALSE) { list_projects() }"},{"path":"https://docs.ropensci.org/circle/reference/new_build.html","id":null,"dir":"Reference","previous_headings":"","what":"Trigger a New Build on Circle CI — new_build","title":"Trigger a New Build on Circle CI — new_build","text":"Triggers new build specific repo branch.","code":""},{"path":"https://docs.ropensci.org/circle/reference/new_build.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trigger a New Build on Circle CI — new_build","text":"","code":"new_build(   repo = github_info()$name,   user = github_info()$owner$login,   vcs_type = \"gh\",   branch = \"master\",   quiet = FALSE )"},{"path":"https://docs.ropensci.org/circle/reference/new_build.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trigger a New Build on Circle CI — new_build","text":"repo [character] repository slug use. Must follow \"user/repo\" structure. user [character] username repository. default queried using get_user(). vcs_type [character] version control system use. Defaults \"gh\" (Github). branch character string specifying repository branch. quiet [logical] TRUE, console output suppressed.","code":""},{"path":"https://docs.ropensci.org/circle/reference/new_build.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trigger a New Build on Circle CI — new_build","text":"object class circle_api following elements content (queried content) path (API request) response (HTTP response information)","code":""},{"path":"https://docs.ropensci.org/circle/reference/new_build.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Trigger a New Build on Circle CI — new_build","text":"Trigger new Circle CI build specific repo branch.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/circle/reference/new_build.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Trigger a New Build on Circle CI — new_build","text":"","code":"if (FALSE) { new_build() }"},{"path":"https://docs.ropensci.org/circle/reference/use_circle_deploy.html","id":null,"dir":"Reference","previous_headings":"","what":"Set Up Build Deployment Between Circle CI And Github — use_circle_deploy","title":"Set Up Build Deployment Between Circle CI And Github — use_circle_deploy","text":"Creates Circle CI \"user-key\" (= SSH key pair) none exists yet enable deployment Circle CI builds GitHub.","code":""},{"path":"https://docs.ropensci.org/circle/reference/use_circle_deploy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Up Build Deployment Between Circle CI And Github — use_circle_deploy","text":"","code":"use_circle_deploy(   repo = github_info()$name,   user = github_info()$owner$login,   quiet = FALSE )"},{"path":"https://docs.ropensci.org/circle/reference/use_circle_deploy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Up Build Deployment Between Circle CI And Github — use_circle_deploy","text":"repo [character] repository slug use. Must follow \"user/repo\" structure. user [character] username repository. default queried using get_user(). quiet [logical] TRUE, console output suppressed.","code":""},{"path":"https://docs.ropensci.org/circle/reference/use_circle_deploy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set Up Build Deployment Between Circle CI And Github — use_circle_deploy","text":"return value, called side effects.","code":""},{"path":"https://docs.ropensci.org/circle/reference/use_circle_deploy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set Up Build Deployment Between Circle CI And Github — use_circle_deploy","text":"easiest way achieve deployment Circle CI builds Github repo creating called \"user-key\" (.e. SSH key pair) Circle CI. use_circle_deploy() tries smart exiting early key already present. repo enabled yet Circle CI, please run enable_repo() first. Also able authenticate Github first place personal access token needs set (via env var GITHUB_TOKEN). usethis::github_token() can used check one already set. none set, function prompt create one.","code":""},{"path":"https://docs.ropensci.org/circle/reference/use_circle_deploy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set Up Build Deployment Between Circle CI And Github — use_circle_deploy","text":"","code":"if (FALSE) { use_circle_deploy() }"},{"path":"https://docs.ropensci.org/circle/news/index.html","id":"circle-072","dir":"Changelog","previous_headings":"","what":"circle 0.7.2","title":"circle 0.7.2","text":"CRAN release: 2022-08-24 CRAN documentation fixes","code":""},{"path":"https://docs.ropensci.org/circle/news/index.html","id":"circle-071","dir":"Changelog","previous_headings":"","what":"circle 0.7.1","title":"circle 0.7.1","text":"CRAN release: 2021-04-21 Initial CRAN release","code":""},{"path":"https://docs.ropensci.org/circle/news/index.html","id":"circle-070","dir":"Changelog","previous_headings":"","what":"circle 0.7.0","title":"circle 0.7.0","text":"Implement feedback ropensci review: Document return values functions Refine {cli} console messages functions gained quiet argument silence {cli} messages chatty side-effect functions Always return circle_api object consistency Switch main branch master main Escape examples Require {usethis} >= 2.0.0 New vignette “Using {circle} {tic}”","code":""},{"path":"https://docs.ropensci.org/circle/news/index.html","id":"circle-060","dir":"Changelog","previous_headings":"","what":"circle 0.6.0","title":"circle 0.6.0","text":"Copy GitHub auth SSH helpers {travis} Print informative message creating user key errors status code 500 *_env_var(): Use owner info instead user info query repo Use {vcr} http testing Add pkgdown reference structure Added pre-commit hooks Added codemeta Use roxygen markdown Added parameter types help pages","code":""},{"path":[]},{"path":"https://docs.ropensci.org/circle/news/index.html","id":"major-0-5-0","dir":"Changelog","previous_headings":"","what":"Major","title":"circle 0.5.0","text":"Add new authentication mechanism: browse_circle_token() query API token store env variable R_CIRCLE alternative method store ~/.circleci/cli.yml Remove auth_travis() Rename circleHTTP() circle() add github_repo() get_pipelines(), get_workflows() get_jobs() now formatted class circle_builds, circle_collection() somewhat pretty print output *_checkout_key(): Optimize printer, catch errors, add info messages, add test make get_pipelines(), get_workflows() get_jobs() work API v2 rename list_artifacts() -> get_build_artifacts()","code":""},{"path":"https://docs.ropensci.org/circle/news/index.html","id":"bugfixes-0-5-0","dir":"Changelog","previous_headings":"","what":"Bugfixes","title":"circle 0.5.0","text":"Pipelines without workflow ID caused get_builds() error. Now pipelines without workflow ID removed internally continuing. setting env vars now works make create_checkout_key() work API v2","code":""},{"path":"https://docs.ropensci.org/circle/news/index.html","id":"circle-040","dir":"Changelog","previous_headings":"","what":"circle 0.4.0","title":"circle 0.4.0","text":"update “cache” function new user/owner logic v0.3.0 new has_checkout_key() check specific checkout key exists project","code":""},{"path":"https://docs.ropensci.org/circle/news/index.html","id":"circle-030","dir":"Changelog","previous_headings":"","what":"circle 0.3.0","title":"circle 0.3.0","text":"Rename argument project repo stay consistent travis pkg. Add Github helper functions easily query owners users repository operating . change requires git2r package now .","code":""},{"path":"https://docs.ropensci.org/circle/news/index.html","id":"circle-020","dir":"Changelog","previous_headings":"","what":"circle 0.2.0","title":"circle 0.2.0","text":"Fix api_version create_ssh_key() rename ssh_key* functions checkout_key* create_checkout_key() change default arg type “github-user-key” “deploy-key” add argument encode circleHTTP() add use_circle_deploy()","code":""}]
